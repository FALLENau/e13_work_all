{
  "_args": [
    [
      {
        "raw": "enumeration",
        "scope": null,
        "escapedName": "enumeration",
        "name": "enumeration",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Whitepaw/e13_work/week_10/day_04/this"
    ]
  ],
  "_from": "enumeration@latest",
  "_id": "enumeration@0.1.2",
  "_inCache": true,
  "_location": "/enumeration",
  "_npmUser": {
    "name": "third",
    "email": "tlsantor@gmail.com"
  },
  "_npmVersion": "1.2.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "enumeration",
    "scope": null,
    "escapedName": "enumeration",
    "name": "enumeration",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/enumeration/-/enumeration-0.1.2.tgz",
  "_shasum": "d65ca6a0ffda1477214cdb3be8c2acdb115aea48",
  "_shrinkwrap": null,
  "_spec": "enumeration",
  "_where": "/Users/Whitepaw/e13_work/week_10/day_04/this",
  "author": {
    "name": "Third Santor"
  },
  "bugs": {
    "url": "https://github.com/third/enumeration/issues"
  },
  "dependencies": {},
  "description": "A javascript-based implementation of Enumeration Type.",
  "devDependencies": {
    "mocha": ">= 1.12.0",
    "should": ">= 1.2.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "d65ca6a0ffda1477214cdb3be8c2acdb115aea48",
    "tarball": "https://registry.npmjs.org/enumeration/-/enumeration-0.1.2.tgz"
  },
  "homepage": "https://github.com/third/enumeration#readme",
  "keywords": [
    "enumeration",
    "enum",
    "stringValue"
  ],
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "third",
      "email": "tlsantor@gmail.com"
    }
  ],
  "name": "enumeration",
  "optionalDependencies": {},
  "readme": "Enumeration\n===========\n\nA javascript-based implementation of Enumeration Type.\n\n\n  - For array of strings, the value of the items in the enumeration starts with zero (0) and increments by one for the succeeding items. To override the start value, set *startAt* property of the *options* (optional) parameter. \n  - Each enumeration item has a function *.toStringValue()* which by default returns a capitalized string of the enumeration key. To customize string value, instantiate enumeration with an array of objects.\n\n  - Accepted Parameters\n    - Array of Strings ['Element0', 'Element1', .., 'ElementN']\n    - Array of Objects [{Element0: 100}, {Element1: 200}, .., {ElementN: X}]\n    - Object {Element0: 100, Element1: 200, .., ElementN: X}\n\n\nInstallation\n------------\n\nvia npm:\n\n    $ npm install enumeration\n\nExamples\n--------\n\n**Require enumeration module**\n\n    var Enumeration = require('enumeration');\n\n**3 Ways to instantiate enumeration**\n\n**1. Array of strings**\n\nBy default, the value of the first item is zero (0). Each successive item's value is increased by 1. To override the default start value, set the *startAt* property of the options parameter to your desired value (e.g. {startAt: 1}). \n\nEach enumeration item has a function called *.toStringValue()* which by default returns a capitalized string of the enumeration item. To specify custom string values, pass an array of objects (*see second way to instantiate*). \n\n        \n        \n*Syntax*\n    \n    new Enumeration(arrayOfStrings, [options])\n\n\n*Sample Code*\n\n    //create enumeration with array of strings    \n    var Colors = new Enumeration(['RED', 'GREEN', 'BLUE']);\n\n    //returns 0\n    Colors.RED\n\n    //returns 2\n    Colors.BLUE\n\n    //override default start value\n    var Colors = new Enumeration(['RED', 'GREEN', 'BLUE'], {startAt: 1});\n\n    //returns 1\n    Colors.RED\n\n    //returns 3\n    Colors.BLUE\n  \n    //returns \"Green\"\n    Colors.GREEN.toStringValue();\n\n  \n**2. Array of objects**\n\nTo specify custom string values, add a property named *stringValue* to each item in the array of objects\n\n*Syntax*\n    \n    new Enumeration(arrayOfObjects)\n\n\n*Sample Code*\n\n    //create enumeration with array of objects\n    var Colors = new Enumeration([{RED: 0}, {GREEN: 1}, {BLUE: 2}]);\n\n    //returns 1\n    Colors.GREEN    \n\n    //returns \"Green\"\n    Colors.GREEN.toStringValue()    \n\n\n    //specify custom string values\n    var Colors = new Enumeration([{RED: 0, stringValue: 'Red Roses'}, {GREEN: 1, stringValue: 'Green Light'}, {BLUE: 2, stringValue: 'Blue Book'}]);\n\n    //returns \"Green Light\"\n    Colors.GREEN.toStringValue()    \n\n\n**3. Object**\n\nIf you have created your own javascript enumeration before, chances are this is the format that you are more familiar with.\n\n*Syntax*\n    \n    new Enumeration(object)\n\n*Sample Code*\n\n    //create enumeration with object\n    var Colors = new Enumeration({RED: 0, GREEN: 1, BLUE: 2});\n\n    //returns 1\n    Colors.GREEN    \n\n    //returns \"Green\"\n    Colors.GREEN.toStringValue(); \n\n\n\n**Methods**\n\n    //create enumeration with specified custom string values\n    var Colors = new Enumeration([{RED: 0, stringValue: 'Red Roses'}, {GREEN: 1, stringValue: 'Green Light'}, {BLUE: 2, stringValue: 'Blue Book'}]);\n\n    //returns \"Blue Book\"\n    Colors.getStringValue(2);\n\n\n    //if value is not found, specify a default value. This will return \"Unknown\"\n    Colors.getStringValue(-1, 'Unknown');\n\n\n    //check if value exists on the enumeration. This will return false.\n    Colors.hasValue(99);\n\n\n    //returns enumeration keys in an array [\"RED\", \"GREEN\", \"BLUE\"]\n    Colors.getKeys();\n\n\n    //returns enumeration values in an array [0, 1, 2]\n    Colors.getValues();\n\n    //returns enumeration string values [\"Red Roses\", \"Green Light\", \"Blue Book\"]\n    Colors.getStringValues();\n\n\n**Others**\n\n    //returns {\"RED\":0,\"GREEN\":100,\"BLUE\":200}\n    JSON.stringify(Colors)\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/third/enumeration.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.1.2"
}
